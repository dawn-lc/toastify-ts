{
  "version": 3,
  "sources": ["../src/toastify.ts"],
  "sourcesContent": ["namespace Toastify {\n    type Gravity = \"top\" | \"bottom\";\n    type Position = \"left\" | \"center\" | \"right\";\n    type AriaLive = \"off\" | \"polite\" | \"assertive\";\n    type CSSProperties = Record<keyof CSSStyleDeclaration, string>;\n\n    /**\n     * Toastify configuration options interface\n     * @property {HTMLElement} [root] - Root element\n     * @property {string} [text] - Text content to display\n     * @property {Node} [node] - Custom DOM node as a text replacement\n     * @property {number} [duration=3000] - Auto-close delay (milliseconds)\n     * @property {boolean} [close] - Whether to show a close button\n     * @property {Gravity} [gravity=\"top\"] - Display position (top/bottom)\n     * @property {Position} [position=\"left\"] - Horizontal alignment\n     * @property {AriaLive} [ariaLive=\"polite\"] - Screen reader announcement mode\n     * @property {string} [className] - Custom CSS class name\n     * @property {boolean} [stopOnFocus=true] - Pause auto-close on hover\n     * @property {() => void} [onClose] - Callback function after closing\n     * @property {(e: MouseEvent) => void} [onClick] - Click event callback\n     * @property {CSSProperties} [style] - Inline style configuration\n     * @property {boolean} [oldestFirst=true] - Notification order for new messages\n     */\n    export interface Options {\n        root?: Element;\n        text?: string;\n        node?: Node;\n        duration?: number;\n        close?: boolean;\n        gravity?: Gravity;\n        position?: Position;\n        ariaLive?: AriaLive;\n        className?: string;\n        stopOnFocus?: boolean;\n        onClose?: () => void;\n        onClick?: (e: Event) => void;\n        style?: CSSProperties;\n        oldestFirst?: boolean;\n    }\n\n    class Manager {\n        private static timeoutMap = new Map<Toast, number>();\n        private static containers = new Map<string, HTMLElement>();\n\n        static getContainer(gravity: Gravity, position: Position): HTMLElement {\n            const containerId = `toast-container-${gravity}-${position}`;\n            if (this.containers.has(containerId)) {\n                return this.containers.get(containerId)!;\n            }\n            return this.createContainer(containerId, gravity, position);\n        }\n\n        private static createContainer(id: string, gravity: Gravity, position: Position): HTMLElement {\n            const container = document.createElement(\"div\");\n            container.classList.add('toast-container', id, `toast-${gravity}`, `toast-${position}`);\n            container.setAttribute('role', 'region');\n            container.setAttribute('aria-label', `Toast notifications - ${gravity} ${position}`);\n            document.body.appendChild(container);\n            this.containers.set(id, container);\n            return container;\n        }\n\n        static addTimeout(toast: Toast, duration: number, callback: () => void) {\n            this.delTimeout(toast);\n            const timeoutId = window.setTimeout(() => {\n                callback();\n                this.delTimeout(toast);\n            }, duration);\n            this.timeoutMap.set(toast, timeoutId);\n        }\n\n        static delTimeout(toast: Toast) {\n            if (this.timeoutMap.has(toast)) {\n                clearTimeout(this.timeoutMap.get(toast)!);\n                this.timeoutMap.delete(toast);\n            }\n        }\n    }\n\n    class Builder {\n        static build(toast: Toast) {\n            this.applyBaseStyles(toast);\n            this.addContent(toast);\n            this.addInteractiveElements(toast);\n        }\n\n        private static applyBaseStyles(toast: Toast) {\n            toast.element.setAttribute('aria-live', toast.ariaLive);\n            toast.element.classList.add(\n                'toast',\n                `toast-${toast.gravity}`,\n                `toast-${toast.position}`\n            );\n            if (toast.options.className) toast.element.classList.add(toast.options.className);\n            if (toast.options.style) this.applyCustomStyles(toast.element, toast.options.style);\n        }\n        private static applyCustomStyles(element: HTMLElement, styles: CSSProperties) {\n            for (const key in styles) {\n                element.style[key] = styles[key];\n            }\n        }\n\n        private static addContent(toast: Toast) {\n            if (toast.options.text) toast.element.textContent = toast.options.text;\n            if (toast.options.node) toast.element.appendChild(toast.options.node);\n        }\n\n        private static addInteractiveElements(toast: Toast) {\n            if (toast.close) this.addCloseButton(toast);\n            if (toast.onClick) toast.element.addEventListener(\"click\", e => toast.onClick?.(e));\n        }\n\n        private static addCloseButton(toast: Toast) {\n            const closeBtn = document.createElement(\"span\");\n            closeBtn.ariaLabel = \"Close\";\n            closeBtn.className = \"toast-close\";\n            closeBtn.textContent = \"ðŸ—™\";\n            closeBtn.addEventListener(\"click\", e => toast.hide());\n            toast.element.appendChild(closeBtn);\n        }\n    }\n\n    /**\n     * Toast\n     * @example\n     * new Toast({ text: \"Hello World\" }).show();\n     */\n    export class Toast {\n        private readonly defaults: Options = {\n            duration: 3000,\n            gravity: \"top\",\n            position: 'right',\n            ariaLive: \"polite\",\n            close: false,\n            stopOnFocus: true,\n            oldestFirst: true,\n        };\n\n        public options: Options;\n\n        public element: HTMLElement;\n        public root: Element;\n        public gravity: Gravity;\n        public position: Position;\n        public ariaLive: AriaLive;\n        public close: boolean;\n        public oldestFirst: boolean;\n        public stopOnFocus: boolean;\n        public onClick?: (e: Event) => void;\n        public onClose?: () => void;\n\n        /**\n         * Create a Toastify instance\n         * @param options User configuration options\n         */\n        constructor(options: Options) {\n            this.options = {\n                ...this.defaults,\n                ...options\n            };\n            this.element = document.createElement(\"div\");\n            this.gravity = this.options.gravity!;\n            this.position = this.options.position!;\n            this.root = this.options.root ?? Manager.getContainer(this.gravity, this.position);\n            this.close = this.options.close!;\n            this.oldestFirst = this.options.oldestFirst!;\n            this.stopOnFocus = this.options.stopOnFocus!;\n            this.ariaLive = this.options.ariaLive!;\n            if (this.options.onClick) this.onClick = this.options.onClick;\n            if (this.options.onClose) this.onClose = this.options.onClose;\n            Builder.build(this);\n        }\n\n        /**\n         * Display the Toast notification\n         * @returns this Instance for method chaining\n         */\n        public show(): this {\n            const elementToInsert = this.oldestFirst ? this.root.firstChild : this.root.lastChild;\n            this.root.insertBefore(this.element!, elementToInsert);\n            if (!this.element.classList.replace('hide', 'show')) {\n                this.element.classList.add('show')\n            }\n            if (this.options.duration && this.options.duration > 0) {\n                if (this.options.stopOnFocus) {\n                    this.element.addEventListener(\"mouseover\", () => {\n                        Manager.delTimeout(this);\n                    })\n                    this.element.addEventListener(\"mouseleave\",() => {\n                        Manager.addTimeout(this, this.options.duration!, () => this.hide());\n                    })\n                }\n                Manager.addTimeout(this, this.options.duration!, () => this.hide());\n            }\n            return this;\n        }\n        /**\n         * @deprecated This function is deprecated. Use the show() instead.\n         */\n        public showToast() {\n            return this.show();\n        }\n\n        /**\n         * Immediately hide the current Toast\n         * Triggers a CSS exit animation and removes the element after the animation completes\n         */\n        public hide(): void {\n            if (!this.element) return;\n            Manager.delTimeout(this);\n            const handleAnimationEnd = () => {\n                this.element?.removeEventListener('animationend', handleAnimationEnd);\n                this.element?.remove();\n                this.onClose?.();\n            };\n            this.element.addEventListener('animationend', handleAnimationEnd);\n            if (!this.element.classList.replace('show', 'hide')) {\n                this.element.classList.add('hide')\n            }\n        }\n        /**\n         * @deprecated This function is deprecated. Use the hide() instead.\n         */\n        public hideToast(): void {\n            this.hide();\n        }\n    }\n}\ndeclare global {\n    function Toast(options: Toastify.Options): Toastify.Toast\n}\nexport default function Toast(options: Toastify.Options): Toastify.Toast {\n    return new Toastify.Toast(options)\n}\nglobalThis.Toast = Toast;"],
  "mappings": "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",
  "names": ["Toastify", "Manager", "gravity", "position", "containerId", "id", "container", "toast", "duration", "callback", "timeoutId", "Builder", "element", "styles", "key", "closeBtn", "e", "Toast", "options", "elementToInsert", "handleAnimationEnd"]
}
