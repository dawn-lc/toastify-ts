{
  "version": 3,
  "sources": ["../src/toastify.ts"],
  "sourcesContent": ["namespace Toastify {\n    type Gravity = \"top\" | \"bottom\";\n    type Position = \"left\" | \"center\" | \"right\";\n    type AriaLive = \"off\" | \"polite\" | \"assertive\";\n    type CSSProperties = Record<keyof CSSStyleDeclaration, string>;\n    \n    /**\n     * Toastify configuration options interface\n     * @property {HTMLElement} [root] - Root element\n     * @property {string} [text] - Text content to display\n     * @property {Node} [node] - Custom DOM node as a text replacement\n     * @property {number} [duration=3000] - Auto-close delay (milliseconds)\n     * @property {boolean} [close] - Whether to show a close button\n     * @property {Gravity} [gravity=\"top\"] - Display position (top/bottom)\n     * @property {Position} [position=\"left\"] - Horizontal alignment\n     * @property {AriaLive} [ariaLive=\"polite\"] - Screen reader announcement mode\n     * @property {string} [className] - Custom CSS class name\n     * @property {boolean} [stopOnFocus=true] - Pause auto-close on hover\n     * @property {() => void} [onClose] - Callback function after closing\n     * @property {(e: MouseEvent) => void} [onClick] - Click event callback\n     * @property {CSSProperties} [style] - Inline style configuration\n     * @property {boolean} [oldestFirst=true] - Notification order for new messages\n     */\n    export interface Options {\n        root?: Element;\n        text?: string;\n        node?: Node;\n        duration?: number;\n        close?: boolean;\n        gravity?: Gravity;\n        position?: Position;\n        ariaLive?: AriaLive;\n        className?: string;\n        stopOnFocus?: boolean;\n        onClose?: () => void;\n        onClick?: (e: Event) => void;\n        style?: CSSProperties;\n        oldestFirst?: boolean;\n    }\n    \n    class Manager {\n        private static timeoutMap = new Map<HTMLElement, number>();\n        private static containers = new Map<string, HTMLElement>();\n    \n        static getContainer(gravity: Gravity, position: Position): HTMLElement {\n            const containerId = `toast-container-${gravity}-${position}`;\n            if (this.containers.has(containerId)) {\n                return this.containers.get(containerId)!;\n            }\n            return this.createContainer(containerId, gravity, position);\n        }\n    \n        private static createContainer(id: string, gravity: Gravity, position: Position): HTMLElement {\n            const container = document.createElement(\"div\");\n            container.classList.add('toast-container', id, `toastify-${gravity}`, `toastify-${position}`);\n            container.setAttribute('role', 'region');\n            container.setAttribute('aria-label', `Toast notifications - ${gravity} ${position}`);\n            document.body.appendChild(container);\n            this.containers.set(id, container);\n            return container;\n        }\n    \n        static setAutoDismiss(element: HTMLElement, duration: number, callback: () => void) {\n            this.clearTimeout(element);\n            const timeoutId = window.setTimeout(() => {\n                callback();\n                this.clearTimeout(element);\n            }, duration);\n            this.timeoutMap.set(element, timeoutId);\n        }\n    \n        static clearTimeout(element: HTMLElement) {\n            if (this.timeoutMap.has(element)) {\n                clearTimeout(this.timeoutMap.get(element)!);\n                this.timeoutMap.delete(element);\n            }\n        }\n    }\n    \n    class Builder {\n        static build(toast: Toast) {\n            this.applyBaseStyles(toast);\n            this.addContent(toast);\n            this.addInteractiveElements(toast);\n        }\n    \n        private static applyBaseStyles(toast: Toast) {\n            toast.element.setAttribute('aria-live', toast.ariaLive);\n            toast.element.classList.add(\n                'toastify',\n                `toastify-${toast.gravity}`,\n                `toastify-${toast.position}`\n            );\n            if (toast.options.className) toast.element.classList.add(toast.options.className);\n            if (toast.options.style) this.applyCustomStyles(toast.element, toast.options.style);\n        }    \n        private static applyCustomStyles(element: HTMLElement, styles: CSSProperties) {\n            for (const key in styles) {\n                element.style[key] = styles[key];\n            }\n        }\n    \n        private static addContent(toast: Toast) {\n            if (toast.options.text) toast.element.textContent = toast.options.text;\n            if (toast.options.node) toast.element.appendChild(toast.options.node);\n        }\n    \n        private static addInteractiveElements(toast: Toast) {\n            if (toast.close) this.addCloseButton(toast);\n            if (toast.onClick) toast.element.addEventListener(\"click\", e => toast.onClick?.(e));\n        }\n    \n        private static addCloseButton(toast: Toast) {\n            const closeBtn = document.createElement(\"span\");\n            closeBtn.ariaLabel = \"Close\";\n            closeBtn.className = \"toast-close\";\n            closeBtn.textContent = \"x\";\n            closeBtn.addEventListener(\"click\", e => toast.hideToast());\n            toast.element.appendChild(closeBtn);\n        }\n    }\n    \n    /**\n     * Toast\n     * @example\n     * new Toast({ text: \"Hello World\" }).show();\n     */\n    export class Toast {\n        private readonly defaults: Options = {\n            duration: 3000,\n            gravity: \"top\",\n            position: 'right',\n            ariaLive: \"polite\",\n            close: false,\n            stopOnFocus: true,\n            oldestFirst: true,\n        };\n        \n        public options: Options;\n    \n        public element: HTMLElement;\n        public root: Element;\n        public gravity: Gravity;\n        public position: Position;\n        public ariaLive: AriaLive;\n        public close: boolean;\n        public oldestFirst: boolean;\n        public stopOnFocus: boolean;\n        public onClick?: (e: Event) => void;\n        public onClose?: () => void;\n    \n        /**\n         * Create a Toastify instance\n         * @param options User configuration options\n         */\n        constructor(options: Options) {\n            this.options = { \n                ...this.defaults,\n                ...options\n            };\n            this.element = document.createElement(\"div\"); \n            this.gravity = this.options.gravity!;\n            this.position = this.options.position!;\n            this.root = this.options.root ?? Manager.getContainer(this.gravity, this.position);\n            this.close = this.options.close!;\n            this.oldestFirst = this.options.oldestFirst!;\n            this.stopOnFocus = this.options.stopOnFocus!;\n            this.ariaLive = this.options.ariaLive!;\n            if (this.options.onClick) this.onClick = this.options.onClick;\n            if (this.options.onClose) this.onClose = this.options.onClose;\n            Builder.build(this);\n        }\n        \n        /**\n         * Display the Toast notification\n         * @returns this Instance for method chaining\n         */\n        public show(): this{\n            const elementToInsert = this.oldestFirst ? this.root.firstChild : this.root.lastChild;\n            this.root.insertBefore(this.element!, elementToInsert);\n            if (!this.element.classList.replace('hide','show')) {\n                this.element.classList.add('show')\n            }\n            if (this.options.duration && this.options.duration > 0) {\n                Manager.setAutoDismiss(this.element, this.options.duration!, () => this.hideToast());\n            }\n            return this;\n        }\n        public showToast() {\n            return this.show();\n        }\n\n        /**\n         * Immediately hide the current Toast\n         * Triggers a CSS exit animation and removes the element after the animation completes\n         */\n        public hide():void {\n            if (!this.element) return;\n            Manager.clearTimeout(this.element);\n            const handleAnimationEnd = () => {\n                this.element?.removeEventListener('animationend', handleAnimationEnd);\n                this.element?.remove();\n                this.onClose?.();\n            };\n            this.element.addEventListener('animationend', handleAnimationEnd);\n            if (!this.element.classList.replace('show','hide')) {\n                this.element.classList.add('hide')\n            }\n        }\n        public hideToast(): void {\n            this.hide();\n        }\n    }\n}\ndeclare global {\n    function Toast(options: Toastify.Options): Toastify.Toast\n}\nexport default function Toast(options: Toastify.Options): Toastify.Toast {\n    return new Toastify.Toast(options)\n}\nglobalThis.Toast = Toast;\n\n"],
  "mappings": "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",
  "names": ["Toastify", "Toast"]
}
